---
import Layout from "../../layouts/layout.astro";
import fetchApi, { getStrapiMediaUrl } from "../../lib/Strapi";
import { type Recipe } from "../../types/Recipe";
import slugify from "slugify";

const pageData = await fetchApi<Recipe[]>({
  endpoint: "/recipes",
  query: {
    "populate[0]": "meal_type",
    "populate[1]": "cuisine",
    "populate[2]": "duration",
    "populate[3]": "requirements",
    "populate[4]": "Images",
  },
});
---

<Layout
  title="Recipes"
  ogDescription="My personal collection of healthy and colorful vegan recipes!"
>
  <div class="pb-16">
    <div
      class="inline-grid border bg-emerald-600 gap-[1px] py-[1px] grid-cols-1 lg:grid-cols-2 xl:grid-cols-3"
    >
      {
        pageData.map((r, i) => (
          <div
            class="bg-white relative"
            _={`
			on mouseover transition #img-${i}'s scale from 1 to 0.9 over 150ms end
			on mouseout transition #img-${i}'s scale from 0.9 to 1 over 150ms end
			`}
          >
            <a
              href={`/recipes/${slugify(r.Title).toLowerCase()}`}
              id={`img-${i}`}
              class="image-with-stats"
            >
              <div class="absolute top-3 left-3 text-white font-medium text-lg">
                {r.meal_type?.data?.attributes?.Type ? (
                  <div class="inline-flex uppercase items-baseline rounded-full px-2.5 py-0.5 md:mt-2 lg:mt-0 bg-emerald-600">
                    <span class="sr-only">Type</span>
                    {r.meal_type.data.attributes.Type}
                  </div>
                ) : null}

                {r.cuisine?.data?.attributes?.Cuisine ? (
                  <div class="inline-flex uppercase items-baseline rounded-full px-2.5 py-0.5 md:mt-2 lg:mt-0 bg-emerald-600">
                    <span class="sr-only">Cuisine</span>
                    {r.cuisine.data.attributes.Cuisine}
                  </div>
                ) : null}

                {r.duration?.data?.attributes?.Time ? (
                  <div class="inline-flex uppercase items-baseline rounded-full px-2.5 py-0.5 md:mt-2 lg:mt-0 bg-emerald-600">
                    <span class="sr-only">Duration</span>
                    {r.duration.data.attributes.Time}
                  </div>
                ) : null}

                {r.requirements?.length ? (
                  <div class="inline-flex uppercase items-baseline rounded-full px-2.5 py-0.5 md:mt-2 lg:mt-0 bg-emerald-600">
                    <span class="sr-only">Requirements</span>
                    {r.requirements
                      .map((req) => req.data.attributes.Requirement)
                      .join(", ")}
                  </div>
                ) : null}
              </div>

              <img
                src={
                  r.Images?.data?.length
                    ? getStrapiMediaUrl(r.Images?.data[0]?.attributes?.url)
                    : "/logo-responsive.png"
                }
                class="object-cover aspect-1"
              />
            </a>

            <div class="py-4">
              <h3 class="text-emerald-600 text-center text-xl font-serif font-bold leading-6">
                {r.Title}
              </h3>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</Layout>
