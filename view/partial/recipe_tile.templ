package partial

import (
	"fmt"
	"github.com/andrei0427/lifeofmarrow/view/helpers"
	"github.com/gosimple/slug"
	"strings"
)

type RecipeEntity struct {
	Title        string                        `json:"Title"`
	PortionSize  string                        `json:"PortionSize"`
	MealTypes    MealTypeRelation              `json:"meal_types"`
	Cuisine      CuisineRelation               `json:"cuisine"`
	Duration     DurationRelation              `json:"duration"`
	Requirements RequirementsRelation          `json:"requirements"`
	Images       helpers.StrapiMediaCollection `json:"Images"`
	Method       string                        `json:"Method"`
	Foreword     string                        `json:"Foreword"`
	Ingredients  string                        `json:"Ingredients"`
}

type MealType struct {
	Type string `json:"Type"`
}
type MealTypeRelation struct {
	Data []struct {
		Id         int      `json:"id"`
		Attributes MealType `json:"attributes"`
	} `json:"Data"`
}

type Cuisine struct {
	Cuisine string `json:"Cuisine"`
}
type CuisineRelation struct {
	Data struct {
		Id         int     `json:"id"`
		Attributes Cuisine `json:"attributes"`
	} `json:"Data"`
}

type Duration struct {
	Time string `json:"Time"`
}
type DurationRelation struct {
	Data struct {
		Id         int      `json:"id"`
		Attributes Duration `json:"attributes"`
	} `json:"Data"`
}

type Requirements struct {
	Requirement string `json:"Requirement"`
}
type RequirementsRelation struct {
	Data []struct {
		Id         int          `json:"id"`
		Attributes Requirements `json:"attributes"`
	} `json:"Data"`
}

func getMealTypeStrings(mtr MealTypeRelation) []string {
	s := make([]string, 0)

	for _, mt := range mtr.Data {
		s = append(s, mt.Attributes.Type)
	}

	return s
}

func getRequirementStrings(r RequirementsRelation) []string {
	s := make([]string, 0)

	for _, req := range r.Data {
		s = append(s, req.Attributes.Requirement)
	}

	return s
}

templ RecipeTile(r RecipeEntity, pageNo int, isLast bool) {
	<div
		class="basis-full md:basis-1/2 xl:basis-1/3 bg-emerald-50 relative hover:text-emerald-600"
		_={ `on mouseover add .scale-90 to (.img in me) add .text-gray-900 to (<h3/> in me) end
				on mouseout remove .scale-90 from (.img in me) remove .text-gray-900 from (<h3/> in me) end` }
	>
		<a href={ templ.SafeURL(fmt.Sprintf("/recipe/%s", slug.Make(r.Title))) } class="opacity-0 transition-all duration-500" _="init remove .opacity-0 from me">
			<div class="img transition-all ease-in-out duration-150">
				<div class="absolute top-3 left-3 text-white font-medium text-lg z-[5]">
					if len(r.MealTypes.Data) > 0 {
						<div class="inline-flex uppercase items-baseline rounded-full text-sm mr-0.5 px-2.5 py-0.5 md:mt-2 lg:mt-0 bg-emerald-600">
							<span class="sr-only">Type</span>
							{ strings.Join(getMealTypeStrings(r.MealTypes),", ") }
						</div>
					}
					if len(r.Cuisine.Data.Attributes.Cuisine) > 0 {
						<div class="inline-flex uppercase items-baseline rounded-full text-sm mr-0.5 px-2.5 py-0.5 md:mt-2 lg:mt-0 bg-emerald-600">
							<span class="sr-only">Cuisine</span>
							{ r.Cuisine.Data.Attributes.Cuisine }
						</div>
					}
					if len(r.Duration.Data.Attributes.Time) > 0 {
						<div class="inline-flex uppercase items-baseline rounded-full text-sm mr-0.5 px-2.5 py-0.5 md:mt-2 lg:mt-0 bg-emerald-600">
							<span class="sr-only">Duration</span>
							{ r.Duration.Data.Attributes.Time }
						</div>
					}
					if len(r.Requirements.Data) > 0 {
						<div class="inline-flex uppercase items-baseline rounded-full text-sm mr-0.5 px-2.5 py-0.5 md:mt-2 lg:mt-0 bg-emerald-600">
							<span class="sr-only">Requirements</span>
							{ strings.Join(getRequirementStrings(r.Requirements),", ") }
						</div>
					}
				</div>
				if len(r.Images.Data) > 0 {
					<img
						src={ helpers.GetStrapiMediaUrl(r.Images.Data[0].Attributes.Url) }
						class="object-cover aspect-1"
					/>
				} else {
					<img
						src="/static/img/logo-responsive.png"
						class="object-cover aspect-1 transition-all ease-in-out duration-150"
					/>
				}
			</div>
			<div class="py-4 text-emerald-600">
				<h3 class="text-center text-xl font-sans font-bold leading-6">
					{ r.Title }
				</h3>
			</div>
		</a>
	</div>
	if isLast {
		<div id={ fmt.Sprintf("pager-%d", pageNo) } hx-params="*" hx-trigger="revealed" hx-swap="outerHTML"></div>
		@updatePager(pageNo)
	}
}

script updatePager(pageNo int) {
	const elm = document.getElementById("pager-"+pageNo);
	elm.setAttribute("hx-get", location.pathname + "/" + (pageNo+1) + location.search );
	htmx.process(elm);
}
