package partial

import (
	"fmt"
	"github.com/andrei0427/lifeofmarrow/internal"
	"net/http"
	"strings"
	"slices"
	"sort"
)

type SelectedRecipeFilters struct {
	SelectedMealTypes internal.StrapiCollectionResponse[MealType]
	MealTypes         internal.StrapiCollectionResponse[MealType]

	SelectedCuisines internal.StrapiCollectionResponse[Cuisine]
	Cuisines         internal.StrapiCollectionResponse[Cuisine]

	SelectedDurations internal.StrapiCollectionResponse[Duration]
	Durations         internal.StrapiCollectionResponse[Duration]

	SelectedRequirements internal.StrapiCollectionResponse[Requirements]
	Requirements         internal.StrapiCollectionResponse[Requirements]

	SearchText string
	Slug       string
}

func NewSelectedRecipeFilters(r *http.Request) (*SelectedRecipeFilters, error) {
	mealTypes, err := internal.GetRecordCollectionFromStrapi[MealType](internal.StrapiQueryOptions{
		Endpoint: "meal-types",
	})
	if err != nil {
		return nil, err
	}
	sort.Slice(mealTypes.Data, func(i, j int) bool {
		return mealTypes.Data[i].Attributes.Type < mealTypes.Data[j].Attributes.Type
	})

	cuisines, err := internal.GetRecordCollectionFromStrapi[Cuisine](internal.StrapiQueryOptions{
		Endpoint: "cuisines",
	})
	if err != nil {
		return nil, err
	}
	sort.Slice(cuisines.Data, func(i, j int) bool {
		return cuisines.Data[i].Attributes.Cuisine < cuisines.Data[j].Attributes.Cuisine
	})

	durations, err := internal.GetRecordCollectionFromStrapi[Duration](internal.StrapiQueryOptions{
		Endpoint: "durations",
	})
	if err != nil {
		return nil, err
	}
	sort.Slice(durations.Data, func(i, j int) bool {
		return durations.Data[i].Attributes.Time < durations.Data[j].Attributes.Time
	})

	requirements, err := internal.GetRecordCollectionFromStrapi[Requirements](internal.StrapiQueryOptions{
		Endpoint: "requirements",
	})
	if err != nil {
		return nil, err
	}
	sort.Slice(requirements.Data, func(i, j int) bool {
		return requirements.Data[i].Attributes.Requirement < requirements.Data[j].Attributes.Requirement
	})

	filters := &SelectedRecipeFilters{
		MealTypes:    *mealTypes,
		Cuisines:     *cuisines,
		Durations:    *durations,
		Requirements: *requirements,
	}
	filters.readFilters(r)

	return filters, nil
}

func (f *SelectedRecipeFilters) readFilters(r *http.Request) {
	mealtypes := r.URL.Query()["mealtype"]
	if len(mealtypes) > 0 {
		for _, pmt := range mealtypes {
			for _, mt := range f.MealTypes.Data {
				if strings.EqualFold(mt.Attributes.Type, pmt) {
					f.SelectedMealTypes.Data = append(f.SelectedMealTypes.Data, mt)
				}
			}
		}
	}

	cuisines := r.URL.Query()["cuisine"]
	if len(cuisines) > 0 {
		for _, pc := range cuisines {
			for _, c := range f.Cuisines.Data {
				if strings.EqualFold(c.Attributes.Cuisine, pc) {
					f.SelectedCuisines.Data = append(f.SelectedCuisines.Data, c)
				}
			}
		}
	}

	durations := r.URL.Query()["duration"]
	if len(durations) > 0 {
		for _, pd := range durations {
			for _, d := range f.Durations.Data {
				if strings.EqualFold(d.Attributes.Time, pd) {
					f.SelectedDurations.Data = append(f.SelectedDurations.Data, d)
				}
			}
		}
	}

	requirements := r.URL.Query()["requirement"]
	if len(requirements) > 0 {
		for _, pr := range requirements {
			for _, r := range f.Requirements.Data {
				if strings.EqualFold(r.Attributes.Requirement, pr) {
					f.SelectedRequirements.Data = append(f.SelectedRequirements.Data, r)
				}
			}
		}
	}

	search := r.URL.Query().Get("search")
	if len(search) > 0 {
		f.SearchText = search
	}

}

templ RecipeFilters(filters SelectedRecipeFilters) {
	<div
		id="filters-container"
		hx-swap-oob="true"
	>
		<div class="relative z-40 sm:hidden" role="dialog" aria-modal="true">
			<!--
      Off-canvas menu backdrop, show/hide based on off-canvas menu state.

      Entering: "transition-opacity ease-linear duration-300"
        From: "opacity-0"
        To: "opacity-100"
      Leaving: "transition-opacity ease-linear duration-300"
        From: "opacity-100"
        To: "opacity-0"
    -->
			<div class="fixed inset-0 bg-black bg-opacity-25"></div>
			<div class="fixed inset-0 z-40 flex">
				<!--
        Off-canvas menu, show/hide based on off-canvas menu state.

        Entering: "transition ease-in-out duration-300 transform"
          From: "translate-x-full"
          To: "translate-x-0"
        Leaving: "transition ease-in-out duration-300 transform"
          From: "translate-x-0"
          To: "translate-x-full"
      -->
				<div class="relative ml-auto flex h-full w-full max-w-xs flex-col overflow-y-auto bg-emerald-50 py-4 pb-12 shadow-xl">
					<div class="flex items-center justify-between px-4">
						<h2 class="text-lg font-medium text-gray-900">Filters</h2>
						<button type="button" class="-mr-2 flex h-10 w-10 items-center justify-center rounded-md bg-white p-2 text-gray-400">
							<span class="sr-only">Close menu</span>
							<svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
								<path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path>
							</svg>
						</button>
					</div>
					<!-- Filters -->
					<form class="mt-4">
						<div class="border-t border-gray-200 px-4 py-6">
							<h3 class="-mx-2 -my-3 flow-root">
								<!-- Expand/collapse section button -->
								<button type="button" class="flex w-full items-center justify-between bg-white px-2 py-3 text-sm text-gray-400" aria-controls="filter-section-0" aria-expanded="false">
									<span class="font-medium text-gray-900">Category</span>
									<span class="ml-6 flex items-center">
										<!--
                    Expand/collapse icon, toggle classes based on section open state.

                    Open: "-rotate-180", Closed: "rotate-0"
                  -->
										<svg class="rotate-0 h-5 w-5 transform" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
											<path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path>
										</svg>
									</span>
								</button>
							</h3>
							<!-- Filter section, show/hide based on section state. -->
							<div class="pt-6" id="filter-section-0">
								<div class="space-y-6">
									<div class="flex items-center">
										<input id="filter-mobile-category-0" name="category[]" value="new-arrivals" type="checkbox" class="h-4 w-4 rounded border-gray-300 text-emerald-600 focus:ring-emerald-500"/>
										<label for="filter-mobile-category-0" class="ml-3 text-sm text-gray-500">All New Arrivals</label>
									</div>
									<div class="flex items-center">
										<input id="filter-mobile-category-1" name="category[]" value="tees" type="checkbox" class="h-4 w-4 rounded border-gray-300 text-emerald-600 focus:ring-emerald-500"/>
										<label for="filter-mobile-category-1" class="ml-3 text-sm text-gray-500">Tees</label>
									</div>
									<div class="flex items-center">
										<input id="filter-mobile-category-2" name="category[]" value="objects" type="checkbox" checked class="h-4 w-4 rounded border-gray-300 text-emerald-600 focus:ring-emerald-500"/>
										<label for="filter-mobile-category-2" class="ml-3 text-sm text-gray-500">Objects</label>
									</div>
								</div>
							</div>
						</div>
						<div class="border-t border-gray-200 px-4 py-6">
							<h3 class="-mx-2 -my-3 flow-root">
								<!-- Expand/collapse section button -->
								<button type="button" class="flex w-full items-center justify-between bg-white px-2 py-3 text-sm text-gray-400" aria-controls="filter-section-1" aria-expanded="false">
									<span class="font-medium text-gray-900">Color</span>
									<span class="ml-6 flex items-center">
										<!--
                    Expand/collapse icon, toggle classes based on section open state.

                    Open: "-rotate-180", Closed: "rotate-0"
                  -->
										<svg class="rotate-0 h-5 w-5 transform" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
											<path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path>
										</svg>
									</span>
								</button>
							</h3>
							<!-- Filter section, show/hide based on section state. -->
							<div class="pt-6" id="filter-section-1">
								<div class="space-y-6">
									<div class="flex items-center">
										<input id="filter-mobile-color-0" name="color[]" value="white" type="checkbox" class="h-4 w-4 rounded border-gray-300 text-emerald-600 focus:ring-emerald-500"/>
										<label for="filter-mobile-color-0" class="ml-3 text-sm text-gray-500">White</label>
									</div>
									<div class="flex items-center">
										<input id="filter-mobile-color-1" name="color[]" value="beige" type="checkbox" class="h-4 w-4 rounded border-gray-300 text-emerald-600 focus:ring-emerald-500"/>
										<label for="filter-mobile-color-1" class="ml-3 text-sm text-gray-500">Beige</label>
									</div>
									<div class="flex items-center">
										<input id="filter-mobile-color-2" name="color[]" value="blue" type="checkbox" class="h-4 w-4 rounded border-gray-300 text-emerald-600 focus:ring-emerald-500"/>
										<label for="filter-mobile-color-2" class="ml-3 text-sm text-gray-500">Blue</label>
									</div>
								</div>
							</div>
						</div>
						<div class="border-t border-gray-200 px-4 py-6">
							<h3 class="-mx-2 -my-3 flow-root">
								<!-- Expand/collapse section button -->
								<button type="button" class="flex w-full items-center justify-between bg-white px-2 py-3 text-sm text-gray-400" aria-controls="filter-section-2" aria-expanded="false">
									<span class="font-medium text-gray-900">Sizes</span>
									<span class="ml-6 flex items-center">
										<!--
                    Expand/collapse icon, toggle classes based on section open state.

                    Open: "-rotate-180", Closed: "rotate-0"
                  -->
										<svg class="rotate-0 h-5 w-5 transform" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
											<path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path>
										</svg>
									</span>
								</button>
							</h3>
							<!-- Filter section, show/hide based on section state. -->
							<div class="pt-6" id="filter-section-2">
								<div class="space-y-6">
									<div class="flex items-center">
										<input id="filter-mobile-sizes-0" name="sizes[]" value="s" type="checkbox" class="h-4 w-4 rounded border-gray-300 text-emerald-600 focus:ring-emerald-500"/>
										<label for="filter-mobile-sizes-0" class="ml-3 text-sm text-gray-500">S</label>
									</div>
									<div class="flex items-center">
										<input id="filter-mobile-sizes-1" name="sizes[]" value="m" type="checkbox" class="h-4 w-4 rounded border-gray-300 text-emerald-600 focus:ring-emerald-500"/>
										<label for="filter-mobile-sizes-1" class="ml-3 text-sm text-gray-500">M</label>
									</div>
									<div class="flex items-center">
										<input id="filter-mobile-sizes-2" name="sizes[]" value="l" type="checkbox" class="h-4 w-4 rounded border-gray-300 text-emerald-600 focus:ring-emerald-500"/>
										<label for="filter-mobile-sizes-2" class="ml-3 text-sm text-gray-500">L</label>
									</div>
								</div>
							</div>
						</div>
					</form>
				</div>
			</div>
		</div>
		<!-- Filters -->
		<section aria-labelledby="filter-heading">
			<h2 id="filter-heading" class="sr-only">Filters</h2>
			<div class="border-b border-gray-200 bg-emerald-50 py-4">
				<div class="mx-auto flex w-screen items-center justify-center gap-x-6 px-4 sm:px-6 lg:px-8">
					<!-- Mobile filter dialog toggle, controls the 'mobileFiltersOpen' state. -->
					<button type="button" class="inline-block text-sm font-medium text-gray-700 hover:text-gray-900 sm:hidden">Filters</button>
					<div class="hidden sm:block">
						<div class="flow-root">
							<div class="-mx-4 flex items-center divide-x divide-gray-200">
								<div class="relative inline-block px-4 text-left">
									<button
										type="button"
										class="group inline-flex justify-center text-sm font-medium text-gray-700 hover:text-gray-900"
										aria-expanded="false"
										_="on click show #ddl-mealtype with *ease
									    on click elsewhere hide #ddl-mealtype with *ease"
									>
										<span>Meal Type</span>
										if len(filters.SelectedMealTypes.Data) > 0 {
											<span
												id="mealtype-count"
												class="ml-1.5 rounded bg-emerald-600 px-1.5 py-0.5 text-xs font-semibold tabular-nums text-white"
											>{ fmt.Sprint(len(filters.SelectedMealTypes.Data)) }</span>
										}
										<svg class="-mr-1 ml-1 h-5 w-5 flex-shrink-0 text-gray-400 group-hover:text-gray-500" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
											<path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path>
										</svg>
									</button>
									<div id="ddl-mealtype" class="hidden absolute left-3 z-10 mt-2 origin-top-right rounded-md bg-white p-4 shadow-2xl ring-1 ring-black ring-opacity-5 focus:outline-none">
										<form class="space-y-4">
											for _, mt := range filters.MealTypes.Data {
												<div class="flex items-center">
													<input
														id={ fmt.Sprintf("mealtype-%d", mt.Id) }
														type="checkbox"
														class="h-4 w-4 rounded border-gray-300 text-emerald-600 focus:ring-emerald-500"
														name="mealtype"
														data-value={ mt.Attributes.Type }
														onChange="toggleFilter(event)"
														hx-trigger="query"
														hx-target="#recipe-results"
														hx-swap="innerHTML"
														hx-push-url="true"
														if slices.Contains(filters.SelectedMealTypes.Data, mt) {
															checked
														}
													/>
													<label for={ fmt.Sprintf("mealtype-%d", mt.Id) } class="ml-3 whitespace-nowrap pr-6 text-sm font-medium text-gray-900">{ mt.Attributes.Type }</label>
												</div>
											}
										</form>
									</div>
								</div>
								<div class="relative inline-block px-4 text-left">
									<button
										type="button"
										class="group inline-flex justify-center text-sm font-medium text-gray-700 hover:text-gray-900"
										aria-expanded="false"
										_="on click show #ddl-cuisine with *ease
									on click elsewhere hide #ddl-cuisine with *ease"
									>
										<span>Cuisine</span>
										if len(filters.SelectedCuisines.Data) > 0 {
											<span
												id="cuisine-count"
												class="ml-1.5 rounded bg-emerald-600 px-1.5 py-0.5 text-xs font-semibold tabular-nums text-white"
											>{ fmt.Sprint(len(filters.SelectedCuisines.Data)) }</span>
										}
										<svg class="-mr-1 ml-1 h-5 w-5 flex-shrink-0 text-gray-400 group-hover:text-gray-500" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
											<path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path>
										</svg>
									</button>
									<div id="ddl-cuisine" class="hidden absolute left-0 z-10 mt-2 origin-top-right rounded-md bg-white p-4 shadow-2xl ring-1 ring-black ring-opacity-5 focus:outline-none">
										<form class="space-y-4">
											for _, c := range filters.Cuisines.Data {
												<div class="flex items-center">
													<input
														id={ fmt.Sprintf("cuisine-%d", c.Id) }
														name="cuisine"
														data-value={ c.Attributes.Cuisine }
														type="checkbox"
														class="h-4 w-4 rounded border-gray-300 text-emerald-600 focus:ring-emerald-500"
														hx-trigger="query"
														hx-target="#recipe-results"
														hx-swap="innerHTML"
														onChange="toggleFilter(event)"
														hx-push-url="true"
														if slices.Contains(filters.SelectedCuisines.Data, c) {
															checked
														}
													/>
													<label
														for={ fmt.Sprintf("cuisine-%d", c.Id) }
														class="ml-3 whitespace-nowrap pr-6 text-sm font-medium text-gray-900"
													>{ c.Attributes.Cuisine }</label>
												</div>
											}
										</form>
									</div>
								</div>
								<div class="relative inline-block px-4 text-left">
									<button
										type="button"
										class="group inline-flex justify-center text-sm font-medium text-gray-700 hover:text-gray-900"
										aria-expanded="false"
										_="on click show #ddl-duration with *ease
									on click elsewhere hide #ddl-duration with *ease"
									>
										<span>Duration</span>
										if len(filters.SelectedDurations.Data) > 0 {
											<span
												id="duration-count"
												class=" ml-1.5 rounded bg-emerald-600 px-1.5 py-0.5 text-xs font-semibold tabular-nums text-white"
											>{ fmt.Sprint(len(filters.SelectedDurations.Data)) }</span>
										}
										<svg class="-mr-1 ml-1 h-5 w-5 flex-shrink-0 text-gray-400 group-hover:text-gray-500" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
											<path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path>
										</svg>
									</button>
									<div id="ddl-duration" class="hidden absolute left-0 z-10 mt-2 origin-top-right rounded-md bg-white p-4 shadow-2xl ring-1 ring-black ring-opacity-5 focus:outline-none">
										<form class="space-y-4">
											for _, d := range filters.Durations.Data {
												<div class="flex items-center">
													<input
														id={ fmt.Sprintf("duration-%d", d.Id) }
														name="duration"
														data-value={ d.Attributes.Time }
														type="checkbox"
														class="h-4 w-4 rounded border-gray-300 text-emerald-600 focus:ring-emerald-500"
														hx-trigger="query"
														hx-target="#recipe-results"
														hx-swap="innerHTML"
														onChange="toggleFilter(event)"
														hx-push-url="true"
														if slices.Contains(filters.SelectedDurations.Data, d) {
															checked
														}
													/>
													<label for={ fmt.Sprintf("duration-%d", d.Id) } class="ml-3 whitespace-nowrap pr-6 text-sm font-medium text-gray-900">{ d.Attributes.Time }</label>
												</div>
											}
										</form>
									</div>
								</div>
								<div class="relative inline-block px-4 text-left">
									<button
										type="button"
										class="group inline-flex justify-center text-sm font-medium text-gray-700 hover:text-gray-900"
										aria-expanded="false"
										_="on click show #ddl-requirements with *ease
									on click elsewhere hide #ddl-requirements with *ease"
									>
										<span>Requirements</span>
										if len(filters.SelectedRequirements.Data) > 0 {
											<span
												id="requirements-count"
												class="ml-1.5 rounded bg-emerald-600 px-1.5 py-0.5 text-xs font-semibold tabular-nums text-white"
											>{ fmt.Sprint(len(filters.SelectedRequirements.Data)) }</span>
										}
										<svg class="-mr-1 ml-1 h-5 w-5 flex-shrink-0 text-gray-400 group-hover:text-gray-500" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
											<path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path>
										</svg>
									</button>
									<div id="ddl-requirements" class="hidden absolute left-0 z-10 mt-2 origin-top-right rounded-md bg-white p-4 shadow-2xl ring-1 ring-black ring-opacity-5 focus:outline-none">
										<form class="space-y-4">
											for _, r := range filters.Requirements.Data {
												<div class="flex items-center">
													<input
														id={ fmt.Sprintf("req-%d", r.Id) }
														name="requirement"
														data-value={ r.Attributes.Requirement }
														type="checkbox"
														class="h-4 w-4 rounded border-gray-300 text-emerald-600 focus:ring-emerald-500"
														hx-push-url="true"
														hx-trigger="query"
														hx-target="#recipe-results"
														hx-swap="innerHTML"
														onChange="toggleFilter(event)"
														if slices.Contains(filters.SelectedRequirements.Data, r) {
															checked
														}
													/>
													<label for={ fmt.Sprintf("req-%d", r.Id) } class="ml-3 whitespace-nowrap pr-6 text-sm font-medium text-gray-900">{ r.Attributes.Requirement }</label>
												</div>
											}
										</form>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div class="relative inline-block text-left">
						<div class="relative mt-2 rounded-md shadow-sm">
							<div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-2">
								<span class="text-emerald-600 sm:text-sm">
									<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
										<path stroke-linecap="round" stroke-linejoin="round" d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z"></path>
									</svg>
								</span>
							</div>
							<input
								hx-trigger="keyup changed delay:1s"
								hx-target="#recipe-results"
								hx-swap="innerHTML"
								hx-push-url="true"
								onKeyup="handleSearch(event)"
								type="text"
								name="search"
								id="search"
								value={ filters.SearchText }
								class="block w-full bg-emerald-50 rounded-md border-0 py-1.5 pl-7 text-emerald-600 ring-1 ring-inset ring-emerald-200 placeholder:text-gray-300 focus:ring-2 focus:ring-inset focus:ring-emerald-600 sm:text-sm sm:leading-6"
								placeholder="Aubergine"
							/>
						</div>
					</div>
				</div>
			</div>
			<!-- Active filters -->
			if len(filters.SelectedMealTypes.Data) > 0 || len(filters.SelectedCuisines.Data) > 0 || len(filters.SelectedDurations.Data) > 0 || len(filters.SelectedRequirements.Data) > 0 {
				<div class="bg-emerald-50">
					<div class="w-screen px-4 py-3 flex items-center justify-center sm:px-6 lg:px-8">
						<h3 class="text-sm font-medium text-gray-500">
							Filters
							<span class="sr-only">, active</span>
						</h3>
						<div aria-hidden="true" class="hidden h-5 w-px bg-gray-300 sm:ml-4 sm:block"></div>
						for _, smt := range filters.SelectedMealTypes.Data {
							<div id={ fmt.Sprintf("filter-mt-%d", smt.Id) } class="mt-2 sm:ml-4 sm:mt-0">
								<div class="-m-1 flex flex-wrap items-center">
									<span class="m-1 inline-flex items-center rounded-full border border-gray-200 bg-white py-1.5 pl-3 pr-2 text-sm font-medium text-gray-900">
										<span>{ smt.Attributes.Type }</span>
										<button
											name="mealtype"
											data-value={ smt.Attributes.Type }
											onClick="toggleFilter(event, true)"
											type="button"
											class="ml-1 inline-flex h-4 w-4 flex-shrink-0 rounded-full p-1 text-gray-400 hover:bg-gray-200 hover:text-gray-500"
											hx-trigger="query"
											hx-push-url="true"
											hx-target="#recipe-results"
											hx-swap="innerHTML"
										>
											<span class="sr-only">Remove filter for { smt.Attributes.Type }</span>
											<svg class="h-2 w-2" stroke="currentColor" fill="none" viewBox="0 0 8 8">
												<path stroke-linecap="round" stroke-width="1.5" d="M1 1l6 6m0-6L1 7"></path>
											</svg>
										</button>
									</span>
								</div>
							</div>
						}
						for _, c := range filters.SelectedCuisines.Data {
							<div id={ fmt.Sprintf("filter-c-%d", c.Id) } class="mt-2 sm:ml-4 sm:mt-0">
								<div class="-m-1 flex flex-wrap items-center">
									<span class="m-1 inline-flex items-center rounded-full border border-gray-200 bg-white py-1.5 pl-3 pr-2 text-sm font-medium text-gray-900">
										<span>{ c.Attributes.Cuisine }</span>
										<button
											name="cuisine"
											data-value={ c.Attributes.Cuisine }
											onClick="toggleFilter(event, true)"
											type="button"
											class="ml-1 inline-flex h-4 w-4 flex-shrink-0 rounded-full p-1 text-gray-400 hover:bg-gray-200 hover:text-gray-500"
											hx-trigger="query"
											hx-push-url="true"
											hx-target="#recipe-results"
											hx-swap="innerHTML"
										>
											<span class="sr-only">Remove filter for { c.Attributes.Cuisine }</span>
											<svg class="h-2 w-2" stroke="currentColor" fill="none" viewBox="0 0 8 8">
												<path stroke-linecap="round" stroke-width="1.5" d="M1 1l6 6m0-6L1 7"></path>
											</svg>
										</button>
									</span>
								</div>
							</div>
						}
						for _, d := range filters.SelectedDurations.Data {
							<div id={ fmt.Sprintf("filter-d-%d", d.Id) } class="mt-2 sm:ml-4 sm:mt-0">
								<div class="-m-1 flex flex-wrap items-center">
									<span class="m-1 inline-flex items-center rounded-full border border-gray-200 bg-white py-1.5 pl-3 pr-2 text-sm font-medium text-gray-900">
										<span>{ d.Attributes.Time }</span>
										<button
											name="duration"
											data-value={ d.Attributes.Time }
											onClick="toggleFilter(event, true)"
											type="button"
											class="ml-1 inline-flex h-4 w-4 flex-shrink-0 rounded-full p-1 text-gray-400 hover:bg-gray-200 hover:text-gray-500"
											hx-push-url="true"
											hx-trigger="query"
											hx-target="#recipe-results"
											hx-swap="innerHTML"
										>
											<span class="sr-only">Remove filter for { d.Attributes.Time }</span>
											<svg class="h-2 w-2" stroke="currentColor" fill="none" viewBox="0 0 8 8">
												<path stroke-linecap="round" stroke-width="1.5" d="M1 1l6 6m0-6L1 7"></path>
											</svg>
										</button>
									</span>
								</div>
							</div>
						}
						for _, r := range filters.SelectedRequirements.Data {
							<div id={ fmt.Sprintf("filter-r-%d", r.Id) } class="mt-2 sm:ml-4 sm:mt-0">
								<div class="-m-1 flex flex-wrap items-center">
									<span class="m-1 inline-flex items-center rounded-full border border-gray-200 bg-white py-1.5 pl-3 pr-2 text-sm font-medium text-gray-900">
										<span>{ r.Attributes.Requirement }</span>
										<button
											name="requirement"
											data-value={ r.Attributes.Requirement }
											onClick="toggleFilter(event, true)"
											type="button"
											class="ml-1 inline-flex h-4 w-4 flex-shrink-0 rounded-full p-1 text-gray-400 hover:bg-gray-200 hover:text-gray-500"
											hx-trigger="query"
											hx-push-url="true"
											hx-target="#recipe-results"
											hx-swap="innerHTML"
										>
											<span class="sr-only">Remove filter for { r.Attributes.Requirement }</span>
											<svg class="h-2 w-2" stroke="currentColor" fill="none" viewBox="0 0 8 8">
												<path stroke-linecap="round" stroke-width="1.5" d="M1 1l6 6m0-6L1 7"></path>
											</svg>
										</button>
									</span>
								</div>
							</div>
						}
					</div>
				</div>
			}
		</section>
	</div>
	<script>
	function handleSearch({target}){
		const {name: key, value} = target;
		
		const params = new URLSearchParams(window.location.search);
		const kv = Array.from(params.entries()).filter(([k,v]) => k !== key && v !== '');

		const newUrl = window.location.pathname + '?' + kv.map(([k,v]) => `${k}=${v}`).join('&');
		target.setAttribute('hx-get', newUrl);


		htmx.process(target);
	}

	function toggleFilter(event, isButton){
		let target = event.target;
		
		if(isButton){
			target = target.closest('button');
		}

		const key = target.getAttribute('name');
		const value = target.getAttribute('data-value');

		const params = new URLSearchParams(window.location.search);
		const hasParam = params.has(key, value);
		const kv = Array.from(params.entries()).filter(([k,v]) => (!hasParam || k !== key || v !== value) && v !== 'on' && v !== '');

		if(!hasParam){
			kv.push([key, value]);
		}

		const newUrl = window.location.pathname + '?' + kv.map(([k,v]) => `${k}=${v}`).join('&');
		target.setAttribute('hx-get', newUrl);

		htmx.process(target);
		htmx.trigger(target, 'query');
	}
	</script>
}
